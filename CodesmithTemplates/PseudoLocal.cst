<%-- 
Name: PseudoLocal
Author: Irfan Charania
Description: Generate psuedolocalization file from input JSON resource file
--%>
<%@ CodeTemplate Inherits="CodeSmith.BaseTemplates.OutputFileCodeTemplate" Language="C#" TargetLanguage="C#" Description="Demonstrates the most basic template." %>
<%@ Property Category="1. Required" Name="JsonFile" Type="System.String" Default="sample.json" Optional="False" Description="The full path to the JSON file." Editor="System.Windows.Forms.Design.FileNameEditor, System.Design" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="CodeSmith.Engine.Json" %>
<%@ Import Namespace="CodeSmith.Engine.Json.Linq" %>
<%
if (!File.Exists(Path.Combine(this.CodeTemplateInfo.DirectoryName, JsonFile)))
    throw new ApplicationException("Json file not found.");

JObject root = JObject.Parse(File.ReadAllText(Path.Combine(this.CodeTemplateInfo.DirectoryName, JsonFile)));
%>
{
<% RenderProperties(root); %>
}

<script runat="template">
private string GetClassName(string pFileName){
    return (Path.GetFileName(pFileName)).Split('.')[0];
}

private void RenderProperties(JObject j)
{
    if (j == null)
        return;

    var last = j.Properties().Last();
    
    foreach (JProperty p in j.Properties())
    {
        Response.Write("    \"" + p.Name + "\": \"" + ConvertToFakeInternationalized(p.Value.ToString()) + "\"");
        if (p != last){
            Response.WriteLine(",");
        }
        else{
            Response.WriteLine();
        }
    }
}

private string GetType(JToken token)
{
    switch (token.Type)
    {
        case JTokenType.Array:
            if (token.HasValues)
                return "List<" + GetType(token.First) + ">";
            return "List<object>";
        case JTokenType.Boolean:
            return "bool";
        case JTokenType.Date:
            return "DateTime";
        case JTokenType.Float:
            return "float";
        case JTokenType.Integer:
            return "int";
        case JTokenType.Object:
            if (token.Parent == null)
                return "object";
            if (token.Parent.Type == JTokenType.Property)
                return StringUtil.ToPascalCase(StringUtil.ToSingular(((JProperty)token.Parent).Name));
            if (token.Parent.Type == JTokenType.Array && token.Parent.Parent != null && token.Parent.Parent.Type == JTokenType.Property)
                return StringUtil.ToPascalCase(StringUtil.ToSingular(((JProperty)token.Parent.Parent).Name));
            return "object";
        case JTokenType.String:
            DateTime date;
            return DateTime.TryParse(token.Value<string>(), out date) ? "DateTime" : "string";
    }

    return "object";
}

private static string[] _intrinsicTypes = new[] { "object", "bool", "DateTime", "float", "int", "string" };
private bool IsIntrinsicType(string type)
{
    return _intrinsicTypes.Any(t => t.Equals(type));
}

private Dictionary<string, JObject> GetObjects(JObject j)
{
    var objects = new Dictionary<string, JObject>();
    GetObjects(j, objects);
    return objects;
}

private void GetObjects(JObject j, Dictionary<string, JObject> objects)
{
    if (j == null)
        return;

    if (objects == null)
        objects = new Dictionary<string, JObject>();

    foreach (JProperty p in j.Properties())
    {
        switch (p.Value.Type)
        {
            case JTokenType.Array:
                if (!p.Value.HasValues)
                    continue;
                if (!objects.ContainsKey(StringUtil.ToPascalCase(StringUtil.ToSingular(p.Name))) && !IsIntrinsicType(GetType(p.Value.First)))
                    objects.Add(StringUtil.ToPascalCase(StringUtil.ToSingular(p.Name)), p.Value.First as JObject);
                GetObjects(p.Value.First as JObject, objects);
                break;
            case JTokenType.Object:
                if (!objects.ContainsKey(StringUtil.ToPascalCase(StringUtil.ToSingular(p.Name))))
                    objects.Add(StringUtil.ToPascalCase(StringUtil.ToSingular(p.Name)), p.Value as JObject);
                GetObjects(p.Value as JObject, objects);
                break;
        }
    }
}

/// <summary>
        /// Converts a string to a pseudo internationized string.
        /// </summary>
        /// <remarks>
        /// Primarily for latin based languages.  This will need updating to
        /// work with Eastern languages.
        /// </remarks>
        /// <param name="inputString">
        /// The string to use as a base.
        /// </param>
        /// <returns>
        /// A longer and twiddled string.
        /// </returns>
public static string ConvertToFakeInternationalized(String inputString)
        {

            //check if the input string is a http or https link... if it is, do not localize
            if (inputString.Contains("http://") || inputString.Contains("https://"))
            {
                return inputString;
            }


            // Calculate the extra space necessary for pseudo
            // internationalization.  The rules, according to "Developing
            // International Software" is that < 10  characters you should grow
            // by 400% while >= 10 characters should grow by 30%.

            int OrigLen = inputString.Length;
            int PseudoLen = 0;
            if (OrigLen < 10)
            {
                PseudoLen = (OrigLen * 4) + OrigLen;
            }
            else
            {
                PseudoLen = ((int)(OrigLen * 0.3)) + OrigLen;
            }

            StringBuilder sb = new StringBuilder(PseudoLen);

            // The pseudo string will always start with a "[" and end
            // with a "]" so you can tell if strings are not built
            // correctly in the UI.
            sb.Append("[");

            bool waitingForEndBrace = false;
            bool waitingForGreaterThan = false;
            foreach (Char currChar in inputString)
            {
                switch (currChar)
                {
                    case '{':
                        waitingForEndBrace = true;
                        break;
                    case '}':
                        waitingForEndBrace = false;
                        break;
                    case '<':
                        waitingForGreaterThan = true;
                        break;
                    case '>':
                        waitingForGreaterThan = false;
                        break;
                }
                if (waitingForEndBrace || waitingForGreaterThan)
                {
                    sb.Append(currChar);
                    continue;
                }
                switch (currChar)
                {
                    case 'A':
                        sb.Append('Å');
                        break;
                    case 'B':
                        sb.Append('ß');
                        break;
                    case 'C':
                        sb.Append('C');
                        break;
                    case 'D':
                        sb.Append('Đ');
                        break;
                    case 'E':
                        sb.Append('Ē');
                        break;
                    case 'F':
                        sb.Append('F');
                        break;
                    case 'G':
                        sb.Append('Ğ');
                        break;
                    case 'H':
                        sb.Append('Ħ');
                        break;
                    case 'I':
                        sb.Append('Ĩ');
                        break;
                    case 'J':
                        sb.Append('Ĵ');
                        break;
                    case 'K':
                        sb.Append('Ķ');
                        break;
                    case 'L':
                        sb.Append('Ŀ');
                        break;
                    case 'M':
                        sb.Append('M');
                        break;
                    case 'N':
                        sb.Append('Ń');
                        break;
                    case 'O':
                        sb.Append('Ø');
                        break;
                    case 'P':
                        sb.Append('P');
                        break;
                    case 'Q':
                        sb.Append('Q');
                        break;
                    case 'R':
                        sb.Append('Ŗ');
                        break;
                    case 'S':
                        sb.Append('Ŝ');
                        break;
                    case 'T':
                        sb.Append('Ŧ');
                        break;
                    case 'U':
                        sb.Append('Ů');
                        break;
                    case 'V':
                        sb.Append('V');
                        break;
                    case 'W':
                        sb.Append('Ŵ');
                        break;
                    case 'X':
                        sb.Append('X');
                        break;
                    case 'Y':
                        sb.Append('Ÿ');
                        break;
                    case 'Z':
                        sb.Append('Ż');
                        break;


                    case 'a':
                        sb.Append('ä');
                        break;
                    case 'b':
                        sb.Append('þ');
                        break;
                    case 'c':
                        sb.Append('č');
                        break;
                    case 'd':
                        sb.Append('đ');
                        break;
                    case 'e':
                        sb.Append('ę');
                        break;
                    case 'f':
                        sb.Append('ƒ');
                        break;
                    case 'g':
                        sb.Append('ģ');
                        break;
                    case 'h':
                        sb.Append('ĥ');
                        break;
                    case 'i':
                        sb.Append('į');
                        break;
                    case 'j':
                        sb.Append('ĵ');
                        break;
                    case 'k':
                        sb.Append('ĸ');
                        break;
                    case 'l':
                        sb.Append('ľ');
                        break;
                    case 'm':
                        sb.Append('m');
                        break;
                    case 'n':
                        sb.Append('ŉ');
                        break;
                    case 'o':
                        sb.Append('ő');
                        break;
                    case 'p':
                        sb.Append('p');
                        break;
                    case 'q':
                        sb.Append('q');
                        break;
                    case 'r':
                        sb.Append('ř');
                        break;
                    case 's':
                        sb.Append('ş');
                        break;
                    case 't':
                        sb.Append('ŧ');
                        break;
                    case 'u':
                        sb.Append('ū');
                        break;
                    case 'v':
                        sb.Append('v');
                        break;
                    case 'w':
                        sb.Append('ŵ');
                        break;
                    case 'x':
                        sb.Append('χ');
                        break;
                    case 'y':
                        sb.Append('y');
                        break;
                    case 'z':
                        sb.Append('ž');
                        break;
                    default:
                        sb.Append(currChar);
                        break;
                }
            }

            // Pop on the trailing "]"
            sb.Append("]");

            return (sb.ToString());
        }
</script>